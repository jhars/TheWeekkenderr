== README

Follow Route-Side-In - start with the routes, then controllers, then templates, then models.

Bootstrap Process:

1. 	#GemFile: Add+
	gem 'bootstrap-sass', '~> 3.2.0'
	gem 'autoprefixer-rails'

2. Application.css (+ .sass to ending)

3. 	Add to: app/asssts/stylesheets/application.css.sass

	@import "bootstrap-sprockets"
	@import "bootstrap"

4. app/asssts/javascripts/application.js
	
	//= require jquery
	//= require jquery_ujs
	//= require turbolinks
	+//= require bootstrap-sprockets*
	//= require_tree .

========================================

TC = Terminal Commands


1. rails new postgresql -d weekender (TC)

2. rake db:create (TC)

3. root 'pages#index' in routes.rb

4. rails g controller pages index (TC)

5. #routes.rb => +get '/about', to: 'pages#show'

6. + show.html.erb

7. Add Bootstrap

8. Add to routes.rb => resources :users

9. Add to users_controller =>

	def index
	end

	def new
	end

	def create
	end

	def show
	end

	def edit
	end

	def update
	end

	def destroy
	end

10. rails g controller sessions new (TC)

11.Add to routes.rb =>

	+get '/login', to: 'sessions#new'
  	+get 'sessions/create'

12. Add to sessions_controller:

	def create
  	end

13. +routes.rb => resources :posts

14. rails g controller posts index new show edit (TC)

15. Add to posts_controller =>

	def index
	end

	def new
	end

	def create
	end

	def show
	end

	def edit
	end

	def update
	end

	def destroy
	end

16. 	+routes.rb
		
	validates :email, uniqueness: true
	validates :email, :password, presence: true


17. rails g model User email:string f_name:string l_name:string password_digest:string (TC)

18. rake db:migrate (TC)

19. rails g model Post title:string content:text (TC)

20. rake db:migrate (TC)

...
21. +GemFile

	# Gemfile
	#
	group :development, :test do
	gem 'FFAKER'
	gem 'rspec-rails'


22. +...db/seed.rb =>

10.times do
     User.create(
        email: FFaker::Internet.email,
        password: FFaker::Internen.password,
        f_name: FFaker::Name.first_name,
        l_name: FFaker::Name.last_name
      ) 
end 





23. $ rails g rspec:install (TC)

24. rails g rspec:model user

25. +...rspec/models/user_spec =>

	RSpec.describe User, type: :model do
	  before do
	    user_params = Hash.new
	    user_params[:f_name] = FFaker::Name.f_name
	    user_params[:l_name] = FFaker::Name.l_name
	    user_params[:email] = FFaker::Internet.email
	    user_params[:password] = FFaker::Lorem.words(2).join
	    @user = User.create(user_params)
	  end

	  describe "#email" do
	    it "to be generated by ffaker" do
	      expect(@user.full_name).to include(@)
	    end
	  end


26. COMMENTED OUT -ApplicationController =>

# Prevent CSRF attacks by raising an exception.

PICK-UP POINT.
------->>>> 
	  https://github.com/sf-wdi-19-20/modules/blob/master/w7_d4_2_testing/challenge_solutions.md


Additional Notes:

Appication Helper:

module ApplicationHelper =====>

  def bootstrap_class_for flash_type
    { success: "alert-success", error: "alert-danger", alert: "alert-warning", notice: "alert-info" }[flash_type] || flash_type.to_s
  end

  def flash_messages(opts = {})
    flash.each do |msg_type, message|
      concat(content_tag(:div, message, class: "alert #{bootstrap_class_for(msg_type)} fade in") do 
              concat content_tag(:button, 'x', class: "close", data: { dismiss: 'alert' })
              concat message 
            end)
    end
    nil
  end
end



Applicaiton.html ==============>>>>>>

<%= flash_messages %>


